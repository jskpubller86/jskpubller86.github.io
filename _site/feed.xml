<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2020-06-09T22:17:08+09:00</updated><id>http://localhost:4000/feed.xml</id><entry><title type="html">요청 테스트</title><link href="http://localhost:4000/2020/04/08/%EC%9A%94%EC%B2%AD-%ED%85%8C%EC%8A%A4%ED%8A%B8.html" rel="alternate" type="text/html" title="요청 테스트" /><published>2020-04-08T00:00:00+09:00</published><updated>2020-04-08T00:00:00+09:00</updated><id>http://localhost:4000/2020/04/08/%EC%9A%94%EC%B2%AD-%ED%85%8C%EC%8A%A4%ED%8A%B8</id><content type="html" xml:base="http://localhost:4000/2020/04/08/%EC%9A%94%EC%B2%AD-%ED%85%8C%EC%8A%A4%ED%8A%B8.html">&lt;h1 id=&quot;웹프로젝트에서-request-파라미터-테스트&quot;&gt;웹프로젝트에서 request 파라미터 테스트&lt;/h1&gt;

&lt;p&gt;테스트 환경 : 스프링&lt;/p&gt;

&lt;h2 id=&quot;1-controller-에서-request에-없는-파라미터를-선택시-반환값-확인&quot;&gt;1. Controller 에서 request에 없는 파라미터를 선택시 반환값 확인&lt;/h2&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getParameter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// null 값 반환&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;2-controller-에서받는-request의-데이터-타입-확인&quot;&gt;2. Controller 에서받는 request의 데이터 타입 확인&lt;/h2&gt;

&lt;h3 id=&quot;21-숫자로-보낼-경우&quot;&gt;2.1. 숫자로 보낼 경우&lt;/h3&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// javascript&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ajax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
     &lt;span class=&quot;na&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;http://localhost:8080/testurl&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
     &lt;span class=&quot;na&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;   
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// java &lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// @Controller&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getParameter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// error &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;request로 받아오는 값은 특정 필터를 지정하지 않는 이상 모두 문자열임.&lt;/p&gt;</content><author><name></name></author><summary type="html"></summary></entry><entry><title type="html">Github Blog</title><link href="http://localhost:4000/2020/04/08/github-blog.html" rel="alternate" type="text/html" title="Github Blog" /><published>2020-04-08T00:00:00+09:00</published><updated>2020-04-08T00:00:00+09:00</updated><id>http://localhost:4000/2020/04/08/github-blog</id><content type="html" xml:base="http://localhost:4000/2020/04/08/github-blog.html">&lt;h1 id=&quot;github-블로그-만들기&quot;&gt;Github 블로그 만들기&lt;/h1&gt;

&lt;p&gt;Github에서는 회원에게 웹호스팅과 도메인을 각각 한 개씩 제공한다. 
이를 이용하기 위해서는 먼저 저장소를 만들어야 하는데 웹호스팅을 할 수 있는 저장소의 이름은 회원아이디를 이용하여 생성해야 한다.&lt;/p&gt;

&lt;p&gt;만약 회원아이디가 korea 라면  korea.github.io  로 생성해야한다.&lt;/p&gt;

&lt;p&gt;korea.github.io 로 저장소가 생성이 되면 웹호스팅에 배포되고 도메인 주소 https://korea.github.io/ 로 접근할 수 있게 된다.&lt;/p&gt;

&lt;h2 id=&quot;1-jekyll-framwork--이용하기&quot;&gt;1. jekyll framwork  이용하기&lt;/h2&gt;

&lt;p&gt;일반적으로 html을 이용하여 블로그를 작성할 수 있지만 그렇게하면 글을 꾸미기 위해서 많은 태그들을 사용하게 된다.&lt;/p&gt;

&lt;p&gt;태그를 사용하는 일은 반복적이고 귀찮은 일이다.&lt;/p&gt;

&lt;p&gt;위의 대안으로 markdown을 이용하여 좀더 쉽게 글을 꾸밀 수 있지만 markdown이 지원하는 태그는 몇가지가 안되기 때문에 html을 사용할 수 밖에 없다.&lt;/p&gt;

&lt;p&gt;그래서 이 둘을 간편하게 작성할 수 있도록 도와주는 프레임워크가 나왔는데 바로 jekyll 이라는 프레임워크이다.&lt;/p&gt;

&lt;p&gt;참고로 나는 jekyll을 제길로 읽는다.&lt;/p&gt;

&lt;p&gt;jekyll 은 마크다운과 html을 모두 지원하며 오직 파일로만 블로그 글을 쉽게 작성할 수 있도록 지원해준다.&lt;/p&gt;

&lt;p&gt;jekyll의 사이트 주소는 아래와 같다.&lt;/p&gt;

&lt;p&gt;https://jekyll.com/&lt;/p&gt;

&lt;p&gt;사이트에 가면 사용법에 대하여 문서화가 되어있다.&lt;/p&gt;

&lt;p&gt;영어를 잘하면 매번 들어가서 확인하면 되지만 난 그러지 못하기 때문에 어려움을 덜고자 정리글을 쓴다.&lt;/p&gt;

&lt;h3 id=&quot;11-설치하기&quot;&gt;1.1. 설치하기&lt;/h3&gt;

&lt;p&gt;jekyll을 사용하기 위해서는 먼저 Ruby 개발환경이 구축되어 있어야 한다.&lt;/p&gt;

&lt;p&gt;Ruby개발환경을 구축하는 방법에 대해서는 따로 글을 작성하겠다.&lt;/p&gt;

&lt;p&gt;그럼 Ruby 개발환경이 구축되어 있다고 가정하고 jekyll과 bundler를 설치해야 한다.
터미널을 열고 다음 명령어를 입력한다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gem &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;jekyll bundler
jekyll &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt;   &lt;span class=&quot;c&quot;&gt;# version 확인&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;jekyll 프레임워크에는 구축에 필요한 의존파일들이 있다. 이러한 의존파일들을 설정하기 위해서는 Gemfile을 만들어야 하는데 다음의 명령어로 생성할 수 있다. 
참고로 Gemfile은 사이트의 루트 폴더에 위치해야 한다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gem &quot;jekyll&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;만약 위 명령어에서 오류가 발생하면 아래와 같이 한다.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gem install jekyll
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Gemfile과 Gemfile.lock 이 생성되었으면 준비는 끝났다.&lt;/p&gt;

&lt;h3 id=&quot;12-파일-생성&quot;&gt;1.2. 파일 생성&lt;/h3&gt;

&lt;p&gt;루트 경로에 간단하게 index.html 파일을 생성한다.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!doctype html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;charset=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;utf-8&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Home&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Hello World!&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;13-빌드&quot;&gt;1.3. 빌드&lt;/h3&gt;

&lt;p&gt;jekll은 빌드를 통해 정적파일을 생성한다.&lt;/p&gt;

&lt;p&gt;빌드를 하기 위해서는 다음 두 명령어를 사용한다 .&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jekyll build  &lt;span class=&quot;c&quot;&gt;# 해당 명령어로 빌드를 하게 되면 _site 라는 폴더에 정적파일들을 생성한다.&lt;/span&gt;
jekyll serve &lt;span class=&quot;c&quot;&gt;# http://localhost:4000 에 배포하며 파일에 변경사항이 있을 http://localhost:4000 에 반영한다.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;현재 index.html 을 위와 같이 생성한 상태에서 터미널을 열고 빌드와 배포를 하면 
 http://localhost:4000 주소에서 “Hello World!” 를 확인 할 수 있다.
배포한 상태에서 파일을 수정하게 되면 수정한 내용이 반영된다.&lt;/p&gt;</content><author><name></name></author><summary type="html">Github 블로그 만들기</summary></entry><entry><title type="html">Github Blog2</title><link href="http://localhost:4000/2020/04/08/github-blog2.html" rel="alternate" type="text/html" title="Github Blog2" /><published>2020-04-08T00:00:00+09:00</published><updated>2020-04-08T00:00:00+09:00</updated><id>http://localhost:4000/2020/04/08/github-blog2</id><content type="html" xml:base="http://localhost:4000/2020/04/08/github-blog2.html">&lt;h1 id=&quot;1-콘텐츠-구성&quot;&gt;1. 콘텐츠 구성&lt;/h1&gt;
&lt;p&gt;jekyll 에서는 콘텐츠를 구성할 때 6가지 기법을 사용한다.&lt;/p&gt;
&lt;h2 id=&quot;11-pages&quot;&gt;1.1 Pages&lt;/h2&gt;
&lt;p&gt;가장 기본적인 방법으로 독립적인 콘텐츠를 구성한다.&lt;/p&gt;

&lt;p&gt;현재 프레임워크에서 root 경로에 html 파일 추가하여 만들수 있으며 
디렉터리와 함께 구성할 수 있다.&lt;/p&gt;

&lt;p&gt;또한 .md 확장자 파일을 만들면 html을 자동으로 변환해 준다.&lt;/p&gt;

&lt;p&gt;접근 경로는 root 경로 사이트의 호스트 주소이므로 다음과 같이 접근할 수 있다.&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;├──about.md     &lt;span class=&quot;c&quot;&gt;# http://example.com/about.html&lt;/span&gt;
├──index.html   &lt;span class=&quot;c&quot;&gt;# http://example.com/&lt;/span&gt;
├──contact.html &lt;span class=&quot;c&quot;&gt;# http://example.com/contact.html&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;만약 사이트에 많은 페이지가 있어야 한다면 하위 폴더를 만들어 분리 할 수 있다.&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
├── about.md          &lt;span class=&quot;c&quot;&gt;# =&amp;gt; http://example.com/about.html&lt;/span&gt;
├── documentation     &lt;span class=&quot;c&quot;&gt;# folder containing pages&lt;/span&gt;
│   └── doc1.md       &lt;span class=&quot;c&quot;&gt;# =&amp;gt; http://example.com/documentation/doc1.html&lt;/span&gt;
├── design            &lt;span class=&quot;c&quot;&gt;# folder containing pages&lt;/span&gt;
│   └── draft.md      &lt;span class=&quot;c&quot;&gt;# =&amp;gt; http://example.com/design/draft.html&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;111-url-변경&quot;&gt;1.1.1. URL 변경&lt;/h3&gt;
&lt;p&gt;만약  URL 에서 접근 경로를 실제 경로와 다르게 하고 싶다면 Front Matter에 permalinks를 설정해 주면 된다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;permalink: /about/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;12-posts&quot;&gt;1.2. Posts&lt;/h2&gt;
&lt;p&gt;jekyll은 당신이 필요한 곳에 블로그 글을 제공해준다.&lt;/p&gt;

&lt;h3 id=&quot;121-posts-folder&quot;&gt;1.2.1 Posts Folder&lt;/h3&gt;
&lt;p&gt;_posts 폴더는 블로그 글이 있는 곳이다.&lt;/p&gt;

&lt;p&gt;기본적으로 Markdown, HTML은 지원한다.&lt;/p&gt;
&lt;h3 id=&quot;122-posts-생성&quot;&gt;1.2.2 Posts 생성&lt;/h3&gt;
&lt;p&gt;Posts를 만들기 위해서는 _posts 디렉터리를 생성하고  다음과 같은 형식으로 파일을 생성해야 한다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;YEAR-MONTH-DAY-title.MARKUP
&lt;span class=&quot;c&quot;&gt;# YEAR는 4자리 연도 &lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# MONTH 2자리&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# DAY 2자리 &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위 형식으로 만든 파일은 다음과 같다.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;2011-09-01-how-to-write-a-blog.md
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;블로그 파일에는 반드시 front matter를 명시하여 layout 메타 데이터를 추가해줘야한다. 
기본적으로 post를 명시한다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;---
layout: post
title:  &quot;Welcome to Jekyll!&quot;
---

# Welcome

**Hello world**, this is my first Jekyll blog post.

I hope you like it!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;123-이미지-및-자원-포함시키기&quot;&gt;1.2.3 이미지 및 자원 포함시키기&lt;/h3&gt;
&lt;p&gt;블로그에 이미지 파일이나 자원을 포함시킬 경우 root 디렉터리에 assets 폴더를 만들고 그 안에 이미지, 파일, 또는 다른 자원을 저장하고 다음과 같은 경로로 포함시킬수 있다.&lt;/p&gt;
&lt;div class=&quot;language-md highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;... which is shown in the screenshot below:
&lt;span class=&quot;p&quot;&gt;![&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;My helpful screenshot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;/assets/screenshot.jpg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;pdf의 경우 다운로드 받는다.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;... you can [get the PDF](/assets/mydoc.pdf) directly.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;124-게시물-목록-구성&quot;&gt;1.2.4 게시물 목록 구성&lt;/h3&gt;
&lt;p&gt;다른 페이지에서 Liquid 태그를 사용하면 손쉽게 게시물 목록을 구성할 수 있다.&lt;/p&gt;
&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
  
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/2020/04/08/%EC%9A%94%EC%B2%AD-%ED%85%8C%EC%8A%A4%ED%8A%B8.html&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;요청 테스트&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/2020/04/08/github-blog2.html&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Github Blog2&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/2020/04/08/github-blog.html&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Github Blog&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;125-tags-and-categories&quot;&gt;1.2.5 Tags and Categories&lt;/h3&gt;</content><author><name></name></author><summary type="html">1. 콘텐츠 구성 jekyll 에서는 콘텐츠를 구성할 때 6가지 기법을 사용한다. 1.1 Pages 가장 기본적인 방법으로 독립적인 콘텐츠를 구성한다.</summary></entry></feed>